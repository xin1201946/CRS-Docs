import{_ as s,o as i,c as t,a4 as e}from"./chunks/framework.Cdfw5sbD.js";const c=JSON.parse('{"title":"","description":"","frontmatter":{"lang":"zh-CN","outline":[2,3]},"headers":[],"relativePath":"Docs/api-docs.md","filePath":"Docs/api-docs.md"}'),n={name:"Docs/api-docs.md"};function l(p,a,h,r,d,o){return i(),t("div",null,a[0]||(a[0]=[e(`<blockquote><p><strong>我们在项目中允许用户进行API定制以满足不同场景需求，设置教程参考<a href="/Docs/help-docs#用户端配置">这里</a></strong></p></blockquote><h2 id="介绍" tabindex="-1">介绍 <a class="header-anchor" href="#介绍" aria-label="Permalink to &quot;介绍&quot;">​</a></h2><blockquote><p>当API状态标记为<code>已弃用</code> 时，前端不再使用该API与后端进行通信，但该功能仍然保留，API仍可正常使用。</p><p>当API状态标记为<code>可用</code>时，该API正常工作</p></blockquote><table tabindex="0"><thead><tr><th>API名称</th><th>功能</th><th>状态</th></tr></thead><tbody><tr><td>clear</td><td>指定用户清除上传的图片时使用的 API</td><td>可用</td></tr><tr><td>getpicture</td><td>指定用户查看上传的图片时使用的 API</td><td>已弃用</td></tr><tr><td>start</td><td>指定前端请求服务器开始处理时使用的 API</td><td>可用</td></tr><tr><td>upload</td><td>指定用户上传图片时请求的 API</td><td>可用</td></tr><tr><td>test</td><td>指定用于测试与后端的连接状态的 API</td><td>可用</td></tr><tr><td>info</td><td>指定用于从服务器获取信息的 API</td><td>已弃用</td></tr><tr><td>isHTTPS</td><td>当前端获取服务器是否启用HTTPS时使用</td><td>已弃用</td></tr></tbody></table><h2 id="api-接入" tabindex="-1">API 接入 <a class="header-anchor" href="#api-接入" aria-label="Permalink to &quot;API 接入&quot;">​</a></h2><div class="note custom-block github-alert"><p class="custom-block-title">提醒</p><p></p><p>接入前请将<code>{API[&quot;your_server_api&quot;]}</code>更换为服务器当前的API配置</p></div><h3 id="clear" tabindex="-1">clear <a class="header-anchor" href="#clear" aria-label="Permalink to &quot;clear&quot;">​</a></h3><h4 id="功能" tabindex="-1">功能 <a class="header-anchor" href="#功能" aria-label="Permalink to &quot;功能&quot;">​</a></h4><p>清空已上传图片</p><h4 id="相关代码" tabindex="-1">相关代码 <a class="header-anchor" href="#相关代码" aria-label="Permalink to &quot;相关代码&quot;">​</a></h4><div class="language-Python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@app.route</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{API</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;your_server_api&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> clear_files</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">():</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  filename </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> request.args.get(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;filename&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 从请求参数中获取文件名</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  delete_files_in_folder(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">filename</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">filename)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> jsonify(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Delete&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span></span></code></pre></div><h4 id="使用方式" tabindex="-1">使用方式 <a class="header-anchor" href="#使用方式" aria-label="Permalink to &quot;使用方式&quot;">​</a></h4><p>方法：[GET,POST]</p><p>参数: 无</p><p>返回: Json , 200</p><h3 id="start" tabindex="-1">start <a class="header-anchor" href="#start" aria-label="Permalink to &quot;start&quot;">​</a></h3><h4 id="功能-1" tabindex="-1">功能 <a class="header-anchor" href="#功能-1" aria-label="Permalink to &quot;功能&quot;">​</a></h4><p>开始处理已上传图片</p><h4 id="相关代码-1" tabindex="-1">相关代码 <a class="header-anchor" href="#相关代码-1" aria-label="Permalink to &quot;相关代码&quot;">​</a></h4><div class="language-Python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@app.route</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{API</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;your_server_api&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">methods</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;GET&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;POST&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">():</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    text</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> auto_run(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">None</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> jsonify([text]),</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span></span></code></pre></div><h4 id="使用方式-1" tabindex="-1">使用方式 <a class="header-anchor" href="#使用方式-1" aria-label="Permalink to &quot;使用方式&quot;">​</a></h4><p>方法：[GET,POST]</p><p>参数: 无</p><p>返回: Json , 200</p><h3 id="upload" tabindex="-1">upload <a class="header-anchor" href="#upload" aria-label="Permalink to &quot;upload&quot;">​</a></h3><h4 id="功能-2" tabindex="-1">功能 <a class="header-anchor" href="#功能-2" aria-label="Permalink to &quot;功能&quot;">​</a></h4><p>上传图片</p><h4 id="相关代码-2" tabindex="-1">相关代码 <a class="header-anchor" href="#相关代码-2" aria-label="Permalink to &quot;相关代码&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>@app.route(f&#39;/{API[&quot;upload&quot;]}&#39;, methods=[&#39;POST&#39;])</span></span>
<span class="line"><span>def upload_file():</span></span>
<span class="line"><span>    try:</span></span>
<span class="line"><span>        files = request.files</span></span>
<span class="line"><span>        print(files, request.files)</span></span>
<span class="line"><span>        for file in files:</span></span>
<span class="line"><span>            if file and files[file].filename != &#39;&#39;:</span></span>
<span class="line"><span>                filename = files[file].filename</span></span>
<span class="line"><span>                with open(os.path.join(UPLOAD_FOLDER, &#39;pic&#39;), &#39;wb&#39;) as f:</span></span>
<span class="line"><span>                    for chunk in files[file].stream:</span></span>
<span class="line"><span>                        f.write(chunk)</span></span>
<span class="line"><span>        return jsonify({&#39;message&#39;: &#39;Done&#39;})</span></span>
<span class="line"><span>    except Exception as e:</span></span>
<span class="line"><span>        # Handle exception and return appropriate error response</span></span>
<span class="line"><span>        return jsonify({&#39;error&#39;: str(e)}), 500  # 500 indicates internal server error</span></span></code></pre></div><h4 id="使用方式-2" tabindex="-1">使用方式 <a class="header-anchor" href="#使用方式-2" aria-label="Permalink to &quot;使用方式&quot;">​</a></h4><p>方法：[POST]</p><p>参数: 图片数据</p><p>返回: Json,200/500</p><h3 id="test" tabindex="-1">test <a class="header-anchor" href="#test" aria-label="Permalink to &quot;test&quot;">​</a></h3><h4 id="功能-3" tabindex="-1">功能 <a class="header-anchor" href="#功能-3" aria-label="Permalink to &quot;功能&quot;">​</a></h4><p>测试与后端的连接状态</p><h4 id="相关代码-3" tabindex="-1">相关代码 <a class="header-anchor" href="#相关代码-3" aria-label="Permalink to &quot;相关代码&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>@app.route(f&#39;/{API[&quot;test&quot;]}&#39;)</span></span>
<span class="line"><span>def test():</span></span>
<span class="line"><span>    return jsonify(&#39;You already connect the server now!&#39;)</span></span></code></pre></div><h4 id="使用方式-3" tabindex="-1">使用方式 <a class="header-anchor" href="#使用方式-3" aria-label="Permalink to &quot;使用方式&quot;">​</a></h4><p>方法：[GET，POST]</p><p>参数: 无</p><p>返回: Json,200</p><h3 id="info" tabindex="-1">info <a class="header-anchor" href="#info" aria-label="Permalink to &quot;info&quot;">​</a></h3><h4 id="功能-4" tabindex="-1">功能 <a class="header-anchor" href="#功能-4" aria-label="Permalink to &quot;功能&quot;">​</a></h4><p>获取服务器设置和已上传图片</p><h4 id="相关代码-4" tabindex="-1">相关代码 <a class="header-anchor" href="#相关代码-4" aria-label="Permalink to &quot;相关代码&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>@app.route(f&#39;/{API[&quot;test&quot;]}&#39;)</span></span>
<span class="line"><span>def test():</span></span>
<span class="line"><span>    return jsonify(&#39;You already connect the server now!&#39;)</span></span></code></pre></div><h4 id="使用方式-4" tabindex="-1">使用方式 <a class="header-anchor" href="#使用方式-4" aria-label="Permalink to &quot;使用方式&quot;">​</a></h4><p>方法：[GET，POST]</p><p>参数: 无</p><p>返回: Json,200</p>`,51)]))}const u=s(n,[["render",l]]);export{c as __pageData,u as default};
